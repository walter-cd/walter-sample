box: wercker-labs/docker
build:
    steps:
        - script:
            name: setup
            code: |
              sudo apt-get update -y
        - install-packages:
            packages: ruby ruby-dev bzr mercurial git wget
        - script:
            name: copy settings.xml for maven
            code: |
              cp ./settings.xml ~/.m2/settings.xml
        - script:
            name: install java
            code: |-
              # Remove java from base box
              sudo apt-get -y purge openjdk-\* icedtea-\* icedtea6-\*

              # Assert that java is not available anymore
              ! type java || { echo "I expected java to be not available. Java version is: $(java -version). Aborting."; exit 1; }

              # Add webupd8 team repository that contains the 3 major oracle-java versions
              sudo add-apt-repository ppa:webupd8team/java -y
              sudo apt-get -y update

              # Accept the oracle license
              echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections
              echo debconf shared/accepted-oracle-license-v1-1 seen true |  sudo debconf-set-selections

              # Install oracle-java7
              sudo apt-get install oracle-java7-installer -y -qq

              # We should have java again
              type java || { echo "I expected java to be available after oracle-java7-installer installation. Aborting."; exit 1; }

              # Install ant
              sudo apt-get install ant ant-contrib ivy ivy-doc -y -qq

              # We should have ant and ivy available
              type ant || { echo "I expected ant to be available. Aborting."; exit 1; }

              # Install maven
              sudo apt-get install maven -y -qq

              type mvn || { echo "I expected maven to be available. Aborting."; exit 1; }
        - script:
            name: setup
            code: |
              sudo gem install bundle --no-ri --no-rdoc
              sudo gem install rake --no-ri --no-rdoc
              sudo gem install serverspec --no-ri --no-rdoc

              # Install golang
              version="1.3.1"
              wget http://golang.org/dl/go${version}.linux-amd64.tar.gz
              sudo tar -C /usr/local -xzf go${version}.linux-amd64.tar.gz
              echo "export PATH=$PATH:/usr/local/go/bin" | sudo tee -a /etc/profile
              rm go${version}.linux-amd64.tar.gz
              # Set GOPATH
              export GOPATH="$HOME/go"
              echo 'export GOPATH="$HOME/go"' | sudo tee -a /etc/profile

              # Adds go bin directory to path so tools
              # and buils are available on the commandline
              export PATH="$PATH:$GOPATH/bin"
              echo 'export PATH="$PATH:$GOPATH/bin"' | sudo tee -a /etc/profile

              # Make actual go workspace dir structure
              mkdir -p "$HOME/go/{src,pkg,bin}"
        - script:
            name: install ansible
            code: |
              sudo apt-get -y install software-properties-common
              sudo apt-add-repository -y ppa:ansible/ansible
              sudo apt-get -y update
              sudo apt-get -y install ansible
        - ainoya/add-ssh-key@1.0.2:
            key_name: WALTERSAMPLE_KEY
        - ainoya/add-ssh-key@1.0.2:
            key_name: ANSIBLE
        - add-to-known_hosts:
            hostname: github.com
            key_name: be:f7:5b:36:01:03:d7:e4:26:7f:73:ba:94:1f:0b:cb
        - script:
            name: build walter
            code: |
                git clone git@github.com:ainoya/walter.git vendor/walter
                cd vendor/walter && ./build
        - script:
            name: execute deployment pipeline with walter
            code : ./vendor/walter/bin/walter -c ./pipeline.yml
